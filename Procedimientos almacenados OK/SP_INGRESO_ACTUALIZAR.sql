CREATE OR REPLACE PROCEDURE SP_INGRESO_ACTUALIZAR (

		IN_INGRESO_ID 				IN NUMBER,
		IN_PRODUCTO_ID 				IN NUMBER,
		IN_KILOGRAMOS 				IN NUMBER,
		IN_PRECIO_KG_COSTO_UNITARIO IN NUMBER,
		IN_PRECIO_KG_VENTA_UNITARIO IN NUMBER,
		IN_HABILITADO				IN NUMBER,

		OUT_GLOSA 					OUT VARCHAR2,
		OUT_ESTADO 					OUT NUMBER,
		OUT_ID_SALIDA 				OUT NUMBER
) AS 

	EX_Sin_data                 EXCEPTION;
	tiene_datos     NUMBER := 0;

BEGIN

	OUT_GLOSA := 'SP_INGRESO_ACTUALIZAR ejecutado exitosamente';
    OUT_ESTADO := 0;

    SELECT
        COUNT(1)
    INTO tiene_datos
    FROM INGRESO ingreso
    WHERE ingreso.ID = IN_INGRESO_ID;

    IF tiene_datos = 0 THEN
        RAISE EX_Sin_data;
    END IF;


UPDATE INGRESO 
SET 
	INGRESO.PRODUCTO_ID = NVL2( IN_PRODUCTO_ID, IN_PRODUCTO_ID, INGRESO.PRODUCTO_ID),
	INGRESO.KILOGRAMOS = NVL2( IN_KILOGRAMOS, IN_KILOGRAMOS, INGRESO.KILOGRAMOS),
	INGRESO.PRECIOKGCOSTOUNITARIO = NVL2( IN_PRECIO_KG_COSTO_UNITARIO, IN_PRECIO_KG_COSTO_UNITARIO, INGRESO.PRECIOKGCOSTOUNITARIO),
	INGRESO.PRECIOKGVENTAUNITARIO = NVL2( IN_PRECIO_KG_VENTA_UNITARIO, IN_PRECIO_KG_VENTA_UNITARIO, INGRESO.PRECIOKGVENTAUNITARIO),
	INGRESO.HABILITADO = NVL2( IN_HABILITADO, IN_HABILITADO, INGRESO.HABILITADO)
WHERE INGRESO.ID=IN_INGRESO_ID;

OUT_ID_SALIDA := IN_INGRESO_ID;


    EXCEPTION
        WHEN EX_Sin_data THEN
            OUT_GLOSA := 'SP_INGRESO_ACTUALIZAR no se encuentra id';
            OUT_ESTADO := -1;
            OUT_ID_SALIDA := -1;


        WHEN OTHERS THEN
            OUT_ESTADO := -1;
            OUT_GLOSA := FN_GET_GLOSA_ERROR;

        NULL;
END SP_INGRESO_ACTUALIZAR;
